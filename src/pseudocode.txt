// camelCase will be used!!

// at least 2 group aware of each pull request

// everyone has own feature branch

// using the google based API 

STEPS - BUILT ON USER INTERACTION PATHWAY 

ON HOMEPAGE PAGE FIRST RENDER API
// set up API in component 游디游디游디
// stuff API call in a useEffect() so that on first page render the books section is filled with random books 游디游디游디 - set what the books are
// set homePageBooks state with API results 游디游디游디
// use homePageBooks array to set JSX on homepage 游디游디游디 - create routes

ON SEARCH INPUT RENDER API
// create search input and button to search for general query 游디游디游디
// userInput will be tracked with an onChange handleInput function to track the user's typing  游디游디游디
// form will have an onSubmit event that will call API 游디游디游디
// Api params will have the user input in the q: " " string  游디游디游디
// set searchResults state with API call 游디游디游디
// use searchResults array and map function to set JSX on homepage 游디游디游디
// create back and forwards buttons at bottom of results 游디游디游디
// create a new state called bookCounter with initial value of 1 游디游디游디

// On forwards button have an onClick event with a function that increases pageCounter (i.e setPageCounter) by the number of books we want to skip from the first call i.e if the first page shows 10 books we want our bookCounter to go up by 10, and have our list on the next page start on the 11th book. I haven't taken a look at how the google books API does pages but im sure there's a query that we can manipulate to have our results have pages. 游디游디游디
// On backwards button we need to have an onClick event with a function that decreases pageCounter and does an API call with the decreased pageCounter number, so an opposite function of the forward click event function 游디游디游디
// both the backward and forward click functions will have api calls within them. So far we have 4 api calls being constructed not including the ones for genres

API CALL RESULTS & PAGE JSX 
// API will return TITLE, AUTHOR, GENRE, RATING, BOOK IMAGE (minimum requirement)游디游디游디
// error handling if user's query doesnt match or no input 游디游디游디
// if error occurs and books list state becomes undefined have the jsx on the page change to reflect no books matching the results i.e ("No books found with those search terms, please alter your search and try again") 游디游디游디
// Books will also feature a link for the book preview as well as a link to a store page for purchase of the book 游디游디游디
// We have currently decided to have 40 books per page, but possibly we decrease that to 10 or 20 so we can take advantage of back and forwards buttons 游디游디游디

FIREBASE STORAGE/PUSHING/ONVALUE
// create a firebase to store 'Reading List' - user can add selected books to store, once selected books are added to the reading list have an icon to display how many books are currently in reading list when reading list hasn't been toggled open 
// 'Reading List' will be shown on the page as a toggled window and automatically update as user favourites books, this will involve using a useEffect with the favourites list in the dependency array so that everytime the reading list changes with an addition or removal the page re-renders and shows those changes 游디游디游디
// create a button to add/remove book to the 'Reading List', button will have an onClick function that will take the book object in it's parameters so that we can push that object to a firebase object called "Unread Reading List" 游디游디游디
// create a button to list book as 'Read', this button will have an onclick event that will remove the object from the "Unread Reading List" and add the same object to "Finished Reading List"
// create a progress bar that compares "Reading List" books with 'books read', we can do this by looking at the lengths of our unread reading list vs the finished reading list i.e something like "{finishedReadingList.length} out of {unreadReadingList.length + finishedReadingList.length} books completed" would translate to 4 out of 11 books completed. Im thinking there's a possibility of using a UI from a library to incorporate an actually loading bar but that is a deeep stretch goal. 


- Main Landing Page

- Each genre will be routed to a seperate page

- Reading List will be hidden and toggled on all pages